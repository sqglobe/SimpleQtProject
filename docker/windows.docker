# Use Ubuntu noble as the base image
FROM ubuntu:noble
# Default threads number for the docker image
ARG THREADS_COUNT=20

# Install dependencies required for the mxe
# you might take it from the official site
RUN apt-get update && apt-get install -y \
    autoconf \
    automake \
    autopoint \
    bash \
    bison \
    bzip2 \
    flex \
    g++ \
    g++-multilib \
    gettext \
    git \
    gperf \
    intltool \
    libc6-dev-i386 \
    libclang-dev \
    libgdk-pixbuf2.0-dev \
    libltdl-dev \
    libgl-dev \
    libpcre2-dev \
    libssl-dev \
    libtool-bin \
    libxml-parser-perl \
    lzip \
    make \
    openssl \
    p7zip-full \
    patch \
    perl \
    python3 \
    python3-mako \
    python3-packaging \
    python3-pkg-resources \
    python3-setuptools \
    python-is-python3 \
    ruby \
    sed \
    sqlite3 \
    unzip \
    wget \
    xz-utils
# Clone repo of the mxe project
RUN mkdir /cross && cd /cross && git clone https://github.com/mxe/mxe.git && cd mxe && git checkout 8f384032d86533452673165d8c0efb4694b18d66
# Change the workdir
WORKDIR /cross/mxe

# Compile all required libraries
RUN make MXE_TARGETS="x86_64-w64-mingw32.static"  -j${THREADS_COUNT} qt6
# Update environment variable
ENV PATH="/cross/mxe/usr/bin:${PATH}"

# Create the folder for the build results
WORKDIR /app/build

# Construct the folder, into which will be mounted
# source code directory 
RUN mkdir -p /app/src

# As an entry point invoke project compilation
# and copying artifacts into the result folder
ENTRYPOINT x86_64-w64-mingw32.static-qt6-qmake /app/src/SimpleQtProject.pro \
           && make release \
           && cp release/SimpleQtProject.exe /app/res/
